import CICConfusionMatrix
import CICFileManager
import CICInterface
import CICTrainingResult
import Combine
import CoreML
import CreateML
import Foundation
import TabularData

private struct ImageAnnotation: Codable {
    let filename: String
    let annotations: [String]
}

public final class MultiLabelClassificationTrainer: ScreeningTrainerProtocol {
    public typealias TrainingResultType = MultiLabelTrainingResult

    private let fileManager = CICFileManager()
    private let outputDirectoryPathOverride: String?

    public var outputDirPath: String {
        if let override = outputDirectoryPathOverride {
            return override
        }
        let currentFileURL = URL(fileURLWithPath: #filePath)
        return currentFileURL
            .deletingLastPathComponent() // MultiLabelClassifier
            .deletingLastPathComponent() // Classifiers
            .appendingPathComponent("CICOutputModels")
            .appendingPathComponent("MultiLabelClassifier")
            .path
    }

    public var classificationMethod: String { "MultiLabel" }

    public var resourcesDirectoryPath: String {
        let currentFileURL = URL(fileURLWithPath: #filePath)
        return currentFileURL
            .deletingLastPathComponent() // MultiLabelClassifier
            .deletingLastPathComponent() // Classifiers
            .deletingLastPathComponent() // Project root
            .appendingPathComponent("CICResources")
            .appendingPathComponent("MultiLabelResources")
            .path
    }

    public init(outputDirectoryPathOverride: String? = nil) {
        self.outputDirectoryPathOverride = outputDirectoryPathOverride
    }

    public func train(
        author: String,
        modelName: String,
        version: String,
        modelParameters: CreateML.MLImageClassifier.ModelParameters,
        scenePrintRevision: Int?
    ) async -> MultiLabelTrainingResult? {
        print("üìÅ „É™„ÇΩ„Éº„Çπ„Éá„Ç£„É¨„ÇØ„Éà„É™: \(resourcesDirectoryPath)")
        print("üöÄ MultiLabel„Éà„É¨„Éº„Éã„É≥„Ç∞ÈñãÂßã („Éê„Éº„Ç∏„Éß„É≥: \(version))...")

        do {
            // „ÇØ„É©„Çπ„É©„Éô„É´„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÂèñÂæó
            let classLabelDirURLs = try getClassLabelDirectories()

            // „Éà„É¨„Éº„Éã„É≥„Ç∞„Éá„Éº„Çø„ÅÆÊ∫ñÂÇô
            let trainingDataSource = try prepareTrainingData(from: classLabelDirURLs)
            print("üìä „Éà„É¨„Éº„Éã„É≥„Ç∞„Éá„Éº„Çø„ÇΩ„Éº„Çπ‰ΩúÊàêÂÆå‰∫Ü")

            // „É¢„Éá„É´„ÅÆ„Éà„É¨„Éº„Éã„É≥„Ç∞
            let (imageClassifier, trainingDurationSeconds) = try trainModel(
                trainingDataSource: trainingDataSource,
                modelParameters: modelParameters
            )

            let trainingMetrics = imageClassifier.trainingMetrics
            let validationMetrics = imageClassifier.validationMetrics

            // Ê∑∑ÂêåË°åÂàó„ÅÆË®àÁÆó
            let confusionMatrix = CICMultiClassConfusionMatrix(
                dataTable: validationMetrics.confusion,
                predictedColumn: "Predicted",
                actualColumn: "True Label"
            )

            // „Éà„É¨„Éº„Éã„É≥„Ç∞ÁµêÊûú„ÅÆË°®Á§∫
            print("\nüìä „Éà„É¨„Éº„Éã„É≥„Ç∞ÁµêÊûú„Çµ„Éû„É™„Éº")
            print(String(
                format: "  Ë®ìÁ∑¥Ê≠£Ëß£Áéá: %.1f%%",
                (1.0 - trainingMetrics.classificationError) * 100.0
            ))

            if let confusionMatrix {
                print(String(
                    format: "  Ê§úË®ºÊ≠£Ëß£Áéá: %.1f%%",
                    (1.0 - validationMetrics.classificationError) * 100.0
                ))
                print(confusionMatrix.getMatrixGraph())
            } else {
                print("‚ö†Ô∏è Ë≠¶Âëä: Ê§úË®º„Éá„Éº„Çø„Åå‰∏çÂçÅÂàÜ„Å™„Åü„ÇÅ„ÄÅÊ∑∑ÂêåË°åÂàó„ÅÆË®àÁÆó„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åó„Åü")
            }

            // „É¢„Éá„É´„ÅÆ„É°„Çø„Éá„Éº„Çø‰ΩúÊàê
            let modelMetadata = createModelMetadata(
                author: author,
                version: version,
                classLabelDirURLs: classLabelDirURLs,
                trainingMetrics: trainingMetrics,
                validationMetrics: validationMetrics,
                modelParameters: modelParameters,
                scenePrintRevision: scenePrintRevision
            )

            // Âá∫Âäõ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆË®≠ÂÆö
            let outputDirectoryURL = try setupOutputDirectory(modelName: modelName, version: version)

            let modelFilePath = try saveModel(
                imageClassifier: imageClassifier,
                modelName: modelName,
                version: version,
                outputDirectoryURL: outputDirectoryURL,
                metadata: modelMetadata
            )

            return createTrainingResult(
                modelName: modelName,
                classLabelDirURLs: classLabelDirURLs,
                trainingMetrics: trainingMetrics,
                validationMetrics: validationMetrics,
                modelParameters: modelParameters,
                scenePrintRevision: scenePrintRevision,
                trainingDurationSeconds: trainingDurationSeconds,
                modelFilePath: modelFilePath
            )

        } catch let createMLError as CreateML.MLCreateError {
            print("üõë „Ç®„É©„Éº: „É¢„Éá„É´ [\(modelName)] „ÅÆ„Éà„É¨„Éº„Éã„É≥„Ç∞„Åæ„Åü„ÅØ‰øùÂ≠òÂ§±Êïó (CreateML): \(createMLError.localizedDescription)")
            print("Ë©≥Á¥∞„Å™„Ç®„É©„ÉºÊÉÖÂ†±:")
            print("- „Ç®„É©„Éº„Ç≥„Éº„Éâ: \(createMLError.errorCode)")
            print("- „Ç®„É©„Éº„ÅÆÁ®ÆÈ°û: \(type(of: createMLError))")
            return nil
        } catch {
            print("üõë „Ç®„É©„Éº: „Éà„É¨„Éº„Éã„É≥„Ç∞„Éó„É≠„Çª„Çπ‰∏≠„Å´‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº: \(error.localizedDescription)")
            print("„Ç®„É©„Éº„ÅÆË©≥Á¥∞:")
            print(error)
            return nil
        }
    }

    public func setupOutputDirectory(modelName: String, version: String) throws -> URL {
        let outputDirectoryURL = try fileManager.createOutputDirectory(
            modelName: modelName,
            version: version,
            classificationMethod: classificationMethod,
            moduleOutputPath: outputDirPath
        )
        print("üìÅ Âá∫Âäõ„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàêÊàêÂäü: \(outputDirectoryURL.path)")
        return outputDirectoryURL
    }

    public func getClassLabelDirectories() throws -> [URL] {
        let classLabelDirURLs = try fileManager.getClassLabelDirectories(resourcesPath: resourcesDirectoryPath)
        print("üìÅ Ê§úÂá∫„Åï„Çå„Åü„ÇØ„É©„Çπ„É©„Éô„É´„Éá„Ç£„É¨„ÇØ„Éà„É™: \(classLabelDirURLs.map(\.lastPathComponent).joined(separator: ", "))")

        guard classLabelDirURLs.count >= 2 else {
            throw NSError(domain: "MultiLabelClassificationTrainer", code: -1, userInfo: [
                NSLocalizedDescriptionKey: "„Éû„É´„ÉÅ„É©„Éô„É´ÂàÜÈ°û„Å´„ÅØ2„Å§‰ª•‰∏ä„ÅÆ„ÇØ„É©„Çπ„É©„Éô„É´„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅåÂøÖË¶Å„Åß„Åô„ÄÇÁèæÂú® \(classLabelDirURLs.count)ÂÄã„ÄÇ",
            ])
        }

        return classLabelDirURLs
    }

    public func prepareTrainingData(from classLabelDirURLs: [URL]) throws -> MLImageClassifier.DataSource {
        let trainingDataParentDirURL = classLabelDirURLs[0].deletingLastPathComponent()
        print("üìÅ „Éà„É¨„Éº„Éã„É≥„Ç∞„Éá„Éº„ÇøË¶™„Éá„Ç£„É¨„ÇØ„Éà„É™: \(trainingDataParentDirURL.path)")

        // JSON„Éï„Ç°„Ç§„É´„ÇíÊ§úÁ¥¢
        let files = try FileManager.default.contentsOfDirectory(at: trainingDataParentDirURL, includingPropertiesForKeys: nil)
        guard let jsonFile = files.first(where: { $0.pathExtension.lowercased() == "json" }) else {
            throw NSError(domain: "MultiLabelClassificationTrainer", code: -1, userInfo: [
                NSLocalizedDescriptionKey: "„Ç¢„Éé„ÉÜ„Éº„Ç∑„Éß„É≥„Éï„Ç°„Ç§„É´ÔºàJSONÔºâ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ",
            ])
        }

        // JSON„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„ÇÄ
        let jsonData = try Data(contentsOf: jsonFile)
        let annotations = try JSONDecoder().decode([ImageAnnotation].self, from: jsonData)
        print("üìÑ „Ç¢„Éé„ÉÜ„Éº„Ç∑„Éß„É≥„Éï„Ç°„Ç§„É´Ë™≠„ÅøËæº„ÅøÂÆå‰∫Ü: \(jsonFile.lastPathComponent)")

        return MLImageClassifier.DataSource.labeledDirectories(at: trainingDataParentDirURL)
    }

    public func trainModel(
        trainingDataSource: MLImageClassifier.DataSource,
        modelParameters: CreateML.MLImageClassifier.ModelParameters
    ) throws -> (MLImageClassifier, TimeInterval) {
        print("üîÑ „É¢„Éá„É´„Éà„É¨„Éº„Éã„É≥„Ç∞ÈñãÂßã...")
        let trainingStartTime = Date()
        let imageClassifier = try MLImageClassifier(trainingData: trainingDataSource, parameters: modelParameters)
        let trainingEndTime = Date()
        let trainingDurationSeconds = trainingEndTime.timeIntervalSince(trainingStartTime)
        print("‚úÖ „É¢„Éá„É´„Éà„É¨„Éº„Éã„É≥„Ç∞ÂÆå‰∫Ü (ÊâÄË¶ÅÊôÇÈñì: \(String(format: "%.1f", trainingDurationSeconds))Áßí)")
        return (imageClassifier, trainingDurationSeconds)
    }

    public func createModelMetadata(
        author: String,
        version: String,
        classLabelDirURLs: [URL],
        trainingMetrics: MLClassifierMetrics,
        validationMetrics: MLClassifierMetrics,
        modelParameters: CreateML.MLImageClassifier.ModelParameters,
        scenePrintRevision: Int?
    ) -> MLModelMetadata {
        let augmentationFinalDescription = if !modelParameters.augmentationOptions.isEmpty {
            String(describing: modelParameters.augmentationOptions)
        } else {
            "„Å™„Åó"
        }

        let featureExtractorDescription = String(describing: modelParameters.featureExtractor)
        let featureExtractorDesc: String = if let revision = scenePrintRevision {
            "\(featureExtractorDescription)(revision: \(revision))"
        } else {
            featureExtractorDescription
        }

        return MLModelMetadata(
            author: author,
            shortDescription: """
            „ÇØ„É©„Çπ: \(classLabelDirURLs.map(\.lastPathComponent).joined(separator: ", "))
            Ë®ìÁ∑¥Ê≠£Ëß£Áéá: \(String(format: "%.1f%%", (1.0 - trainingMetrics.classificationError) * 100.0))
            Ê§úË®ºÊ≠£Ëß£Áéá: \(String(format: "%.1f%%", (1.0 - validationMetrics.classificationError) * 100.0))
            „Éá„Éº„ÇøÊã°Âºµ: \(augmentationFinalDescription)
            ÁâπÂæ¥ÊäΩÂá∫Âô®: \(featureExtractorDesc)
            """,
            version: version
        )
    }

    public func saveModel(
        imageClassifier: MLImageClassifier,
        modelName: String,
        version: String,
        outputDirectoryURL: URL,
        metadata: MLModelMetadata
    ) throws -> String {
        let modelFileName = "\(modelName)_\(classificationMethod)_\(version).mlmodel"
        let modelFilePath = outputDirectoryURL.appendingPathComponent(modelFileName).path

        print("üíæ „É¢„Éá„É´„Éï„Ç°„Ç§„É´‰øùÂ≠ò‰∏≠: \(modelFilePath)")
        try imageClassifier.write(to: URL(fileURLWithPath: modelFilePath), metadata: metadata)
        print("‚úÖ „É¢„Éá„É´„Éï„Ç°„Ç§„É´‰øùÂ≠òÂÆå‰∫Ü")

        return modelFilePath
    }

    public func createTrainingResult(
        modelName: String,
        classLabelDirURLs: [URL],
        trainingMetrics: MLClassifierMetrics,
        validationMetrics: MLClassifierMetrics,
        modelParameters: CreateML.MLImageClassifier.ModelParameters,
        scenePrintRevision: Int?,
        trainingDurationSeconds: TimeInterval,
        modelFilePath: String
    ) -> MultiLabelTrainingResult {
        let augmentationFinalDescription = if !modelParameters.augmentationOptions.isEmpty {
            String(describing: modelParameters.augmentationOptions)
        } else {
            "„Å™„Åó"
        }

        let featureExtractorDescription = String(describing: modelParameters.featureExtractor)
        let featureExtractorDesc: String = if let revision = scenePrintRevision {
            "\(featureExtractorDescription)(revision: \(revision))"
        } else {
            featureExtractorDescription
        }

        let metadata = CICTrainingMetadata(
            modelName: modelName,
            trainingDurationInSeconds: trainingDurationSeconds,
            trainedModelFilePath: modelFilePath,
            sourceTrainingDataDirectoryPath: classLabelDirURLs[0].deletingLastPathComponent().path,
            detectedClassLabelsList: classLabelDirURLs.map(\.lastPathComponent),
            maxIterations: modelParameters.maxIterations,
            dataAugmentationDescription: augmentationFinalDescription,
            featureExtractorDescription: featureExtractorDesc
        )

        let confusionMatrix = CICMultiClassConfusionMatrix(
            dataTable: validationMetrics.confusion,
            predictedColumn: "Predicted",
            actualColumn: "True Label"
        )

        return MultiLabelTrainingResult(
            metadata: metadata,
            trainingMetrics: (
                accuracy: 1.0 - trainingMetrics.classificationError,
                errorRate: trainingMetrics.classificationError
            ),
            validationMetrics: (
                accuracy: 1.0 - validationMetrics.classificationError,
                errorRate: validationMetrics.classificationError
            ),
            confusionMatrix: confusionMatrix,
            individualModelReports: []
        )
    }
}
